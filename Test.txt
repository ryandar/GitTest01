- commands
  - Retrieve a Docker image
    > sudo docker pull ruby:2.2.1
    note this will pull from the docker.io offical site by default
	to pull from a different registry,
	> sudo docker login https://<YOUR-DOMAIN>:8080
	and
	> sudo docker pull <YOUR-DOMAIN>:8080/test-image
	(see https://stackoverflow.com/questions/33054369/how-to-change-the-default-docker-registry-from-docker-io-to-my-private-registry)
  - show installed images 
    > docker images ls
  - create a new container from an image 
    - detached (i.e. jsut start the container, but do not enter its shell)
	  > docker run -t -d ubuntu
	  - note "-d" specified detached mode, i.e. run container in background and print container ID
	  - note "-t" allocates a pseudo-TTY, which is required to keep the container running
	- interactively (i.e. enters the shell of the running container)
      > docker run -it ubuntu
      - note where an image named "ubuntu" has been installed, i.e. is outputted from the "docker images" command
  	  - note run is equivalent to a create and a start operation
	  - note the specified -it options are shorthand for "--interactive" (attach STDIN) and "--tty" (allocate a pseudo-TTY),
	    see https://docs.docker.com/engine/reference/commandline/run/
  - Get a list of docker containers (note ps seemingly means process status)
    > docker ps
	  (show just running containers)
    > docker ps -a
	  (show all containers)
    > docker container ls
    > docker ps -a --format="container:{{.ID}} image:{{.Image}}"
  - start a container that was previously stopped
    > docker start -ai docker3
	- note docker3 is the name of the container (which can be automtatically generated, eg "suspicious_allen")
	- note the specified -ai options are shorthand for "--attach" (attach STDOUT/STDERR) and "--interactive" (attach STDIN),
	  see https://docs.docker.com/engine/reference/commandline/start/
  - stop a container
    > docker stop 8d  (where 8d is the beginning of the hash of the container to remove)
  - remove a running container
    > docker rm 8d  (where 8d is the beginning of the hash of the container to remove)
    > docker rm loving_euclid  (where 8d is the assigned name of the container to remove)
	> docker rm 8d --force	
  - stop all running containers
    > docker stop $(docker ps -a -q)
  - view all installed images
    > docker images
    > docker image ls
  - open a bash prompt in a Linux container
    > docker exec -it docker3 /bin/sh
	> docker exec -it 6d16f /bin/sh
    - from Windows
	  > winpty docker exec -i -t aspnetcore_sample bash
  - see https://medium.com/the-code-review/top-10-docker-commands-you-cant-live-without-54fb6377f481
  - export an image to a zip file
    (see "copy docker image from local machine to droplet" notes in DigitalOcean section)

  - docker volume:
    - create a new docker container mapped to a folder
	    docker run -it -d -v /home/me/testdir01:/var/con-dir01 an-image-name
	- create a volume
	    docker volume create volume01
	- view the created volumes using   
	    docker volume ls
    - create a new docker container mapped to a volume
	    docker run -it -d -v volume01:/var/con-dir01 an-image-name
	- view the contents of a volume
	    docker run --rm -i -v=volume01:/tmp/myvolume busybox find /tmp/myvolume
	  (note this presupposes that the busybox image has been downloaded using "docker pull busybox"
      (from https://stackoverflow.com/questions/34803466/how-to-list-the-content-of-a-named-volume-in-docker-1-9)

Docker compose: / docker-compose:
- sample "docker-compose.yml" in aspnet core solution folder
	version: "3.8"
	services:
		mssql:
		    image: microsoft/mssql-server-linux:2017-latest
		    container_name: sql1
		    ports:
		        - 1433:1433
		    environment:
		        SA_PASSWORD: "password"
		        ACCEPT_EULA: "Y"
		        MSSQL_PID: Developer
		webui:
			container_name: dar-web-01
			build:
				context: .
				dockerfile: WebUI/Dockerfile
			ports: 
				- 32800:80
			environment:
				- DEBUG=100            
		webapi:
			container_name: dar-web-api-01
			build: 
				context: .
				dockerfile: WebAPI/Dockerfile
			ports: 
				- 32801:80            
			environment:
				- DEBUG=99
				- VBOX_MSI_INSTALL_PATH=Banana


      version: "3.8"
      services:
        my_linux_app:
          image: busybox
          container_name: my-busybox-02
          ports:
            - 33001:80
          environment:
            - DEBUG=99
            - VBOX_MSI_INSTALL_PATH=Banana12
            - ENV1=env01
          volumes:
            - /home/my/docker01/test-volume01:/tmp/test-volume01
          tty: true  #required to keep container running
	  
	  
- commands  
  - docker-compose build --no-cache		
  - docker-compose up --force-recreate --no-deps 
	  



- create a web application using a self signed certificate
  (see https://stackoverflow.com/questions/7580508/getting-chrome-to-accept-self-signed-localhost-certificate)
  - become a Certificate Authority
    - generate a private key 
        openssl genrsa -des3 -out myCA.key 2048
      (enter passphrase when prompted)
    - generate root certificate
        openssl req -x509 -new -nodes -key myCA.key -sha256 -days 825 -out myCA.pem
  - create a CA-signed cert (using the CA created above)
    - generate a private key  
        openssl genrsa -out mywebsite01.com.key 2048
    - create a certificate-signing request
        openssl req -new -key mywebsite01.com.key -out mywebsite01.com.csr
      (enter challenge when prompted)
    - create a config file for the extensions
        nano mywebsite01.com.ext
      with the following contents:
        authorityKeyIdentifier=keyid,issuer
        basicConstraints=CA:FALSE
        keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
        subjectAltName = @alt_names
        [alt_names]
        DNS.1 = mywebsite01.com 
        DNS.2 = other.mywebsite01.com
        IP.1 = 192.168.0.13	
    - create the signed certificate  
        openssl x509 -req -in mywebsite01.com.csr -CA myCA.pem -CAkey myCA.key -CAcreateserial -out mywebsite01.com.crt -days 825 -sha256 -extfile mywebsite01.com.ext
    - verify the signed certificate
        openssl verify -CAfile myCA.pem -verify_hostname other.mywebsite01.com mywebsite01.com.crt
      (enter a passphrase when prompted, e.g. "pfxpass")
    - create a pfx
      (from https://stackoverflow.com/questions/6307886/how-to-create-pfx-file-from-certificate-and-private-key)
        openssl pkcs12 -export -out mywebsite01.com.pfx -inkey mywebsite01.com.key -in mywebsite01.com.crt
  - create an asp.net core application using the cert
    (see https://docs.microsoft.com/en-us/aspnet/core/security/docker-https?view=aspnetcore-3.1)
    (see https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-3.1)
    - retrieve the docker image
        docker pull mcr.microsoft.com/dotnet/core/samples:aspnetapp
    - create a container and start it
        docker run  -t -d  --rm -it -p 8000:80 -p 8001:443 -e ASPNETCORE_URLS="https://+;http://+" -e ASPNETCORE_HTTPS_PORT=8001 -e ASPNETCORE_Kestrel__Certificates__Default__Password="pfxpass" -e ASPNETCORE_Kestrel__Certificates__Default__Path=/https/mywebsite01.com.pfx -v /tmp/dar01:/https/ mcr.microsoft.com/dotnet/core/samples:aspnetapp
    - browse to the running application (for example using the DigitialOcean droplet IP address)
        http://157.245.36.75:8000
    - view the certificate details in the browser (clicking on the padlock icon to the left of the url)
	- note the site will not be secure unless the CA authority root cert is installed on the browser 
	
	
	

tagbrahch
